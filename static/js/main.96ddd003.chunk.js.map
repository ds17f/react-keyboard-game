{"version":3,"sources":["effects/useKeys.js","effects/useAudio.js","components/KeyResponse/index.js","components/Prompt/index.js","components/Game/LetterSearch/index.js","App.js","serviceWorker.js","index.js"],"names":["useKeys","alphaCallback","numericCallback","spacebarCallback","escCallback","useEffect","callback","callbacks","push","evt","keyCode","numeric","preventDefault","spacebar","esc","forEach","cb","document","addEventListener","removeEventListener","setupPlaylist","audioElement","tracks","i","src","length","load","play","KeyResponse","React","memo","audioPath","setGuess","db","displayKey","console","log","setKey","key","String","fromCharCode","useState","pressedKey","path","letter","audio","Audio","choose","Math","floor","random","choice","window","location","origin","pause","useAudio","randomColor","toString","className","style","color","Prompt","setGoal","alphaNum","setTargetKey","targetKey","GameBoard","size","min","innerHeight","bias","randomAlpha","alphabet","x","replace","seed","weighted","map","rand","option","LetterSearch","numOfRows","numOfColumns","matrix","y","row","colArr","col","generateLetterMatrix","rowHeight","cellStyle","display","width","innerWidth","height","backgroundColor","colorMap","keyString","getColorMap","Table","onClick","e","content","selectedColor","SelectCell","isSelected","setSelected","foreground","r","g","b","match","slice","sqrt","lightOrDark","newStyle","Object","assign","App","goal","guess","isBeta","setBeta","Form","Check","checked","label","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.96ddd003.chunk.js","sourcesContent":["import {useEffect} from \"react\";\n\nconst alpha = callback => {\n  return evt => {\n    if ( evt.keyCode >= 65 && evt.keyCode <= 90 ) {\n      callback(evt.keyCode);\n    }\n  };\n};\n\nconst numeric = callback => {\n  return evt => {\n    if ( evt.keyCode >= 48 && evt.keyCode <= 57 ) {\n      callback(evt.keyCode);\n    }\n  }\n};\n\nconst spacebar = callback => {\n  return (evt) => {\n    if ( evt.keyCode === 32 ) {\n      evt.preventDefault();\n      callback(evt.keyCode);\n    }\n  };\n};\n\nconst esc = callback => {\n  return (evt) => {\n    if ( evt.keyCode === 27 ) {\n      evt.preventDefault();\n      callback(evt.keyCode);\n    }\n  };\n};\n\nexport const randomAlphaNum = () => {\n  const alphaNum = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\";\n  const rand = Math.floor((Math.random()*36));\n  return alphaNum[rand];\n};\n\nexport const useKeys = (alphaCallback, numericCallback, spacebarCallback, escCallback) => {\n  useEffect(() => {\n    const callbacks = [];\n    alphaCallback && callbacks.push(alpha(alphaCallback));\n    numericCallback && callbacks.push(numeric(numericCallback));\n    spacebarCallback && callbacks.push(spacebar(spacebarCallback));\n    escCallback && callbacks.push(esc(escCallback));\n\n    callbacks.forEach(cb => document.addEventListener(\"keydown\", cb, false));\n\n    return () => {\n      callbacks.forEach(cb => document.removeEventListener(\"keydown\", cb, false));\n    }\n\n  });\n\n};\n","import { useEffect } from \"react\";\n\nconst setupPlaylist = (audioElement, tracks) => {\n  let i = 0;\n\n  audioElement.src = tracks[0];\n  audioElement.addEventListener(\"ended\", () => {\n    i++;\n    if (i < tracks.length) {\n      audioElement.src = tracks[i];\n      audioElement.load();\n      audioElement.play();\n    }\n  }, false)\n};\n\nexport const useAudio2 = (tracks) => {\n  useEffect(() => {\n    const audio = new Audio();\n    setupPlaylist(audio, tracks);\n    audio.play();\n    return () => {\n      audio && audio.pause && audio.pause()\n    }\n  });\n\n};\nexport const useAudio = (path, letter, db) => {\n  useEffect(() => {\n    if (letter === null) {\n      return;\n    }\n\n    const audio = new Audio();\n\n    if (db && db[letter]) {\n      const choose = Math.floor(Math.random() * db[letter].length);\n      const choice = db[letter][choose][0];\n      setupPlaylist(audio, [\n        `${window.location.origin}/audio/${path}${letter}.mp3`,\n        `${window.location.origin}/audio/${path}as_in.mp3`,\n        `${window.location.origin}/audio/${path}${letter}/${choice}`,\n      ]);\n    } else {\n      audio.src = `${window.location.origin}/audio/${path}${letter}.mp3`;\n    }\n\n    audio.play();\n\n    return () => {\n      audio && audio.pause && audio.pause()\n    }\n  });\n};\n\n","import React, { useState } from 'react';\nimport { useKeys } from '../../effects/useKeys';\nimport { useAudio } from \"../../effects/useAudio\";\n\nimport \"./styles.css\";\n\nexport const KeyResponse = React.memo(({audioPath, setGuess, db}) => {\n  const displayKey = keyCode => {\n    console.log(`pressedKey: ${keyCode}`);\n    // force state to change even on the same keypress\n    setKey(null);\n    const key = String.fromCharCode(keyCode);\n    setKey(key);\n    setGuess && setGuess(key);\n  };\n\n  const [pressedKey, setKey] = useState(null);\n\n  useKeys(displayKey, displayKey);\n  useAudio(audioPath, pressedKey, db);\n\n  let randomColor = \"#\" + Math.floor(Math.random()*16777215).toString(16);\n  return <div className=\"KeyResponse\" style={{color: randomColor}}>{pressedKey}</div>\n});\n\n","import React, { useState } from 'react';\nimport {randomAlphaNum, useKeys} from \"../../effects/useKeys\";\n\nimport \"./styles.css\"\n\nexport const Prompt = ({setGoal}) => {\n  const promptForKey = () => {\n    const alphaNum = randomAlphaNum();\n    setGoal && setGoal(alphaNum);\n    setTargetKey(alphaNum)\n  };\n  const reset = () => {\n    console.log(\"reset\");\n    setGoal && setGoal(null);\n    setTargetKey(null);\n  };\n\n  useKeys(null, null, promptForKey, reset);\n  const [targetKey, setTargetKey] = useState(null);\n\n  return targetKey === null\n    ? <div />\n    : <div className=\"Prompt\">Find and Press: <span className=\"TargetKey\">{targetKey}</span></div>\n\n};\n","import React, {useState} from 'react'\nimport {Table} from \"react-bootstrap\";\nimport \"./styles.css\"\n\nexport const  GameBoard = () => {\n  const bias = [\n    [\"Y\", .15, \"lightblue\"],\n    [\"H\", .15, \"red\"],\n    [\"M\", .15, \"lightgreen\"],\n    [\"O\", .15, \"orange\"],\n  ];\n\n  const size = Math.min(10,Math.floor((window.innerHeight - 30) / 60));\n\n  return (\n    <div className=\"GameBoard\">\n      <LetterSearch size={size} bias={bias} />\n    </div>\n  )\n\n};\n\n// bias is an array of letters and their weights\n// so [[\"A\",.25],[\"Z\",.10]]\nconst randomAlpha = (bias) => {\n  let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  // remove the biased letters from the alphabet\n  bias.forEach(x => alphabet = alphabet.replace(x[0], \"\"));\n\n  // build a weighted array\n  let seed = 0;\n  const weighted = bias.map((x) => {\n    seed += x[1];\n    return [x[0],seed, () => x[0]]\n  });\n  // add in the final choice for random alphabet\n  weighted.push([\n    alphabet,\n    1,\n    () => {\n      const rand = Math.floor((Math.random()*alphabet.length));\n      return alphabet[rand];\n    }\n  ]);\n\n  const random = Math.random();\n\n  for (let option of weighted) {\n    if (random < option[1]) {\n      return option[2]();\n    }\n  }\n};\n\nconst getRandomColor = () => {\n  return \"#\" + Math.floor(Math.random()*16777215).toString(16);\n};\n\nconst getColorMap = (keyString) => {\n  const colorMap = {};\n  for (let letter of keyString) {\n    const color = getRandomColor();\n    colorMap[letter] = color !== \"#D3D3D3\" ? color : \"#FF0000\"\n  }\n\n  return colorMap;\n};\n\n\nconst generateLetterMatrix = (x, y, bias) => {\n\n  const matrix = [];\n  for (let row = 0; row < y; row++) {\n    const colArr = [];\n    matrix.push(colArr);\n    for (let col = 0; col < x; col++) {\n      colArr.push(randomAlpha(bias));\n    }\n  }\n  return matrix;\n};\n\nconst LetterSearch = ({size , bias}) => {\n  const numOfRows = size;\n  const numOfColumns = size;\n\n  const matrix = generateLetterMatrix(numOfRows, numOfColumns, bias);\n\n  const rowHeight = (window.innerHeight - 30) / numOfRows;\n  const colWidth = (window.innerWidth * .8) / numOfColumns;\n\n  const cellStyle = {\n    display: \"inline-block\",\n    width: colWidth,//(window.innerWidth * .8 )/ numOfColumns - 8,\n    height: rowHeight,//rowHeight - 8,\n    // margin: `${cellMargin}%`,\n    backgroundColor: \"lightgrey\"\n  };\n\n\n  const audio = new Audio();\n  const colorMap = getColorMap(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n  return matrix\n    ? <Table className=\"LetterSearch\" onClick={(e) => {e.preventDefault()}}>\n        <tbody onClick={(e) => {e.preventDefault()}}>\n        {\n          matrix.map(row => {\n            return <tr onClick={(e) => {e.preventDefault()}}>\n              {\n                row.map(col => {\n                  return <SelectCell style={cellStyle} content={col} selectedColor={colorMap[col]} audio={audio} />\n                })\n              }\n            </tr>\n          })\n\n        }\n        </tbody>\n      </Table>\n    : <div />\n\n};\n\nconst SelectCell = ({content, selectedColor, style, audio}) => {\n  const [isSelected, setSelected] = useState(false);\n\n  const speakLetter = () => {\n    const path = \"set1\";\n    audio.src = `${window.location.origin}/audio/${path}/${content}.mp3`;\n    audio.play();\n  };\n\n  const onClick = () => {\n    console.log(\"click\");\n    speakLetter();\n    setSelected(true);\n  };\n  const foreground = lightOrDark(selectedColor) === \"light\" ? \"black\" : \"white\";\n\n  const newStyle = isSelected\n    ? Object.assign({}, style, {backgroundColor: selectedColor, color: foreground})\n    : style;\n\n  return (\n  <td className=\"LetterCell\" style={newStyle} onClick={onClick}>\n    {content}\n  </td>\n  )\n};\n\nfunction lightOrDark(color) {\n\n  // Variables for red, green, blue values\n  var r, g, b, hsp;\n\n  // Check the format of the color, HEX or RGB?\n  if (color.match(/^rgb/)) {\n\n    // If RGB --> store the red, green, blue values in separate variables\n    color = color.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n\n    r = color[1];\n    g = color[2];\n    b = color[3];\n  }\n  else {\n\n    // If hex --> Convert it to RGB: http://gist.github.com/983661\n    color = +(\"0x\" + color.slice(1).replace(\n      color.length < 5 && /./g, '$&$&'));\n\n    r = color >> 16;\n    // eslint-disable-next-line\n    g = color >> 8 & 255;\n    b = color & 255;\n  }\n\n  // HSP (Highly Sensitive Poo) equation from http://alienryderflex.com/hsp.html\n  hsp = Math.sqrt(\n    0.299 * (r * r) +\n    0.587 * (g * g) +\n    0.114 * (b * b)\n  );\n\n  // Using the HSP value, determine whether the color is light or dark\n  if (hsp>127.5) {\n\n    return 'light';\n  }\n  else {\n\n    return 'dark';\n  }\n}","import React, {useState} from 'react';\nimport { Form } from 'react-bootstrap';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport { KeyResponse } from './components/KeyResponse';\nimport { Prompt } from './components/Prompt';\nimport { GameBoard } from \"./components/Game/LetterSearch\";\n\nfunction App() {\n  const [goal, setGoal] = useState(null);\n  const [guess, setGuess] = useState(null);\n  const [isBeta, setBeta] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <Prompt setGoal={setGoal}/>\n      { isBeta\n        ? <GameBoard/>\n        : <KeyResponse audioPath=\"set1/\" setGuess={setGuess} />\n      }\n      {\n        goal !== null && goal === guess\n        ? <div>YOU WIN</div>\n        : <div />\n      }\n      <Form.Check\n        checked={isBeta}\n        onClick={() => {setBeta(!isBeta)}}\n        label=\"Beta Mode\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}