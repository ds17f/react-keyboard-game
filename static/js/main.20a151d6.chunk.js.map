{"version":3,"sources":["effects/useAudio.js","components/KeyResponse/index.js","effects/useKeys.js","lib/index.js","components/Game/LetterSearch/index.js","components/Game/ColorMatch/gameboard.js","App.js","serviceWorker.js","index.js"],"names":["setupPlaylist","audioElement","tracks","i","src","addEventListener","length","load","play","KeyResponse","React","memo","alphaCallback","numericCallback","spacebarCallback","escCallback","audioPath","setGuess","db","displayKey","keyCode","console","log","setKey","key","String","fromCharCode","useState","pressedKey","useEffect","callback","callbacks","push","evt","numeric","preventDefault","spacebar","esc","forEach","cb","document","removeEventListener","path","letter","audio","Audio","choose","Math","floor","random","choice","window","location","origin","pathname","toLowerCase","pause","useAudio","randomColor","toString","className","style","color","lightOrDark","r","g","b","match","slice","replace","sqrt","ALPHABET","GameBoard","rands","bias","size","min","innerHeight","randomAlpha","alphabet","x","seed","weighted","map","rand","option","LetterSearch","numOfRows","numOfColumns","matrix","y","row","colArr","col","generateLetterMatrix","rowHeight","cellStyle","display","width","innerWidth","height","backgroundColor","colorMap","keyString","getColorMap","Table","onClick","e","content","selectedColor","SelectCell","isSelected","setSelected","foreground","newStyle","Object","assign","rows","columns","verticalAlign","textAlign","fontSize","source","index","makeMatrix","array","temporaryValue","randomIndex","currentIndex","shuffleArray","background","speechSynth","toUpperCase","Modes","App","mode","setMode","getContent","Form","Control","as","onChange","target","value","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.20a151d6.chunk.js","sourcesContent":["import { useEffect } from \"react\";\n\nconst setupPlaylist = (audioElement, tracks) => {\n  let i = 0;\n\n  audioElement.src = tracks[0];\n  audioElement.addEventListener(\"ended\", () => {\n    i++;\n    if (i < tracks.length) {\n      audioElement.src = tracks[i];\n      audioElement.load();\n      audioElement.play();\n    }\n  }, false)\n};\n\nexport const useAudio2 = (tracks) => {\n  useEffect(() => {\n    const audio = new Audio();\n    setupPlaylist(audio, tracks);\n    audio.play();\n    return () => {\n      audio && audio.pause && audio.pause()\n    }\n  });\n\n};\nexport const useAudio = (path, letter, db) => {\n  useEffect(() => {\n    if (letter === null) {\n      return;\n    }\n\n    const audio = new Audio();\n\n    if (db && db[letter]) {\n      const choose = Math.floor(Math.random() * db[letter].length);\n      const choice = db[letter][choose][0];\n      setupPlaylist(audio, [\n        `${window.location.origin}${window.location.pathname}audio/${path}${letter.toLowerCase()}.mp3`,\n        `${window.location.origin}${window.location.pathname}audio/${path}as_in.mp3`,\n        `${window.location.origin}${window.location.pathname}audio/${path}${letter}/${choice}`,\n      ]);\n    } else {\n      audio.src = `${window.location.origin}${window.location.pathname}audio/${path}${letter.toLowerCase()}.mp3`;\n    }\n\n    audio.play();\n\n    return () => {\n      audio && audio.pause && audio.pause()\n    }\n  });\n};\n\n","import React, { useState } from 'react';\nimport { useKeys } from '../../effects/useKeys';\nimport { useAudio } from \"../../effects/useAudio\";\n\nimport \"./styles.css\";\n\nexport const KeyResponse = React.memo(({audioPath, setGuess, db}) => {\n  const displayKey = keyCode => {\n    console.log(`pressedKey: ${keyCode}`);\n    // force state to change even on the same keypress\n    setKey(null);\n    const key = String.fromCharCode(keyCode);\n    setKey(key);\n    setGuess && setGuess(key);\n  };\n\n  const [pressedKey, setKey] = useState(null);\n\n  useKeys(displayKey, displayKey);\n  useAudio(audioPath, pressedKey, db);\n\n  let randomColor = \"#\" + Math.floor(Math.random()*16777215).toString(16);\n  return <div className=\"KeyResponse\" style={{color: randomColor}}>{pressedKey}</div>\n});\n\n","import {useEffect} from \"react\";\n\nconst alpha = callback => {\n  return evt => {\n    if ( evt.keyCode >= 65 && evt.keyCode <= 90 ) {\n      callback(evt.keyCode);\n    }\n  };\n};\n\nconst numeric = callback => {\n  return evt => {\n    if ( evt.keyCode >= 48 && evt.keyCode <= 57 ) {\n      callback(evt.keyCode);\n    }\n  }\n};\n\nconst spacebar = callback => {\n  return (evt) => {\n    if ( evt.keyCode === 32 ) {\n      evt.preventDefault();\n      callback(evt.keyCode);\n    }\n  };\n};\n\nconst esc = callback => {\n  return (evt) => {\n    if ( evt.keyCode === 27 ) {\n      evt.preventDefault();\n      callback(evt.keyCode);\n    }\n  };\n};\n\nexport const randomAlphaNum = () => {\n  const alphaNum = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\";\n  const rand = Math.floor((Math.random()*36));\n  return alphaNum[rand];\n};\n\nexport const useKeys = (alphaCallback, numericCallback, spacebarCallback, escCallback) => {\n  useEffect(() => {\n    const callbacks = [];\n    alphaCallback && callbacks.push(alpha(alphaCallback));\n    numericCallback && callbacks.push(numeric(numericCallback));\n    spacebarCallback && callbacks.push(spacebar(spacebarCallback));\n    escCallback && callbacks.push(esc(escCallback));\n\n    callbacks.forEach(cb => document.addEventListener(\"keydown\", cb, false));\n\n    return () => {\n      callbacks.forEach(cb => document.removeEventListener(\"keydown\", cb, false));\n    }\n\n  });\n\n};\n","export const lightOrDark = (color) => {\n\n  // Variables for red, green, blue values\n  var r, g, b, hsp;\n\n  // Check the format of the color, HEX or RGB?\n  if (color.match(/^rgb/)) {\n\n    // If RGB --> store the red, green, blue values in separate variables\n    color = color.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n\n    r = color[1];\n    g = color[2];\n    b = color[3];\n  }\n  else {\n\n    // If hex --> Convert it to RGB: http://gist.github.com/983661\n    color = +(\"0x\" + color.slice(1).replace(\n      color.length < 5 && /./g, '$&$&'));\n\n    r = color >> 16;\n    // eslint-disable-next-line\n    g = color >> 8 & 255;\n    b = color & 255;\n  }\n\n  // HSP (Highly Sensitive Poo) equation from http://alienryderflex.com/hsp.html\n  hsp = Math.sqrt(\n    0.299 * (r * r) +\n    0.587 * (g * g) +\n    0.114 * (b * b)\n  );\n\n  // Using the HSP value, determine whether the color is light or dark\n  if (hsp>127.5) {\n\n    return 'light';\n  }\n  else {\n\n    return 'dark';\n  }\n}","import React, {useState} from 'react'\nimport {Table} from \"react-bootstrap\";\nimport \"./styles.css\"\nimport { lightOrDark } from '../../../lib'\n\nconst ALPHABET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\nexport const  GameBoard = () => {\n\n  const rands = [\n    Math.floor((Math.random()*ALPHABET.length)),\n    Math.floor((Math.random()*ALPHABET.length)),\n    Math.floor((Math.random()*ALPHABET.length)),\n  ];\n\n  const bias = [\n    [ALPHABET[rands[0]], .20, \"lightblue\"],\n    [ALPHABET[rands[1]], .20, \"red\"],\n    [ALPHABET[rands[2]], .20, \"lightgreen\"],\n  ];\n\n  const size = Math.min(10,Math.floor((window.innerHeight - 30) / 60));\n\n  return (\n    <div className=\"GameBoard\">\n      <LetterSearch size={size} bias={bias} />\n    </div>\n  )\n\n};\n\n// bias is an array of letters and their weights\n// so [[\"A\",.25],[\"Z\",.10]]\nconst randomAlpha = (bias) => {\n  let alphabet = ALPHABET;\n  // remove the biased letters from the alphabet\n  bias.forEach(x => alphabet = alphabet.replace(x[0], \"\"));\n\n  // build a weighted array\n  let seed = 0;\n  const weighted = bias.map((x) => {\n    seed += x[1];\n    return [x[0],seed, () => x[0]]\n  });\n  // add in the final choice for random alphabet\n  weighted.push([\n    alphabet,\n    1,\n    () => {\n      const rand = Math.floor((Math.random()*alphabet.length));\n      return alphabet[rand];\n    }\n  ]);\n\n  const random = Math.random();\n\n  for (let option of weighted) {\n    if (random < option[1]) {\n      return option[2]();\n    }\n  }\n};\n\nconst getRandomColor = () => {\n  return \"#\" + Math.floor(Math.random()*16777215).toString(16);\n};\n\nconst getColorMap = (keyString) => {\n  const colorMap = {};\n  for (let letter of keyString) {\n    const color = getRandomColor();\n    colorMap[letter] = color !== \"#D3D3D3\" ? color : \"#FF0000\"\n  }\n\n  return colorMap;\n};\n\n\nconst generateLetterMatrix = (x, y, bias) => {\n\n  const matrix = [];\n  for (let row = 0; row < y; row++) {\n    const colArr = [];\n    matrix.push(colArr);\n    for (let col = 0; col < x; col++) {\n      colArr.push(randomAlpha(bias));\n    }\n  }\n  return matrix;\n};\n\nconst LetterSearch = ({size , bias}) => {\n  const numOfRows = size;\n  const numOfColumns = size;\n\n  const matrix = generateLetterMatrix(numOfRows, numOfColumns, bias);\n\n  const rowHeight = (window.innerHeight - 30) / numOfRows;\n  const colWidth = (window.innerWidth * .8) / numOfColumns;\n\n  const cellStyle = {\n    display: \"inline-block\",\n    width: colWidth,//(window.innerWidth * .8 )/ numOfColumns - 8,\n    height: rowHeight,//rowHeight - 8,\n    // margin: `${cellMargin}%`,\n    backgroundColor: \"lightgrey\"\n  };\n\n\n  const audio = new Audio();\n  const colorMap = getColorMap(ALPHABET);\n  return matrix\n    ? <Table className=\"LetterSearch\" onClick={(e) => {e.preventDefault()}}>\n        <tbody onClick={(e) => {e.preventDefault()}}>\n        {\n          matrix.map(row => {\n            return <tr onClick={(e) => {e.preventDefault()}}>\n              {\n                row.map(col => {\n                  return <SelectCell style={cellStyle} content={col} selectedColor={colorMap[col]} audio={audio} />\n                })\n              }\n            </tr>\n          })\n\n        }\n        </tbody>\n      </Table>\n    : <div />\n\n};\n\nconst SelectCell = ({content, selectedColor, style, audio}) => {\n  const [isSelected, setSelected] = useState(false);\n\n  const speakLetter = () => {\n    const path = \"set1\";\n    audio.src = `${window.location.origin}${window.location.pathname}audio/${path}/${content.toLowerCase()}.mp3`;\n    audio.play();\n  };\n\n  const onClick = () => {\n    console.log(\"click\");\n    speakLetter();\n    setSelected(true);\n  };\n  const foreground = lightOrDark(selectedColor) === \"light\" ? \"black\" : \"white\";\n\n  const newStyle = isSelected\n    ? Object.assign({}, style, {backgroundColor: selectedColor, color: foreground})\n    : style;\n\n  return (\n  <td className=\"LetterCell\" style={newStyle} onClick={onClick}>\n    {content}\n  </td>\n  )\n};\n","import React from 'react'\nimport {Table} from \"react-bootstrap\";\nimport speechSynth from \"speech-synthesis\";\nimport { lightOrDark } from \"../../../lib\";\n\nconst shuffleArray = (array) => {\n  let currentIndex = array.length;\n  let temporaryValue;\n  let randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n\n\nexport const GameBoard = ({rows, columns}) => {\n  const colorList = [\n    \"red\",\"blue\",\"green\",\n    \"pink\",\"purple\",\"yellow\",\n    \"white\",\"black\", \"orange\"\n  ];\n\n  const makeMatrix = (x, y, source) => {\n    let index = 0;\n    const matrix = [];\n    for (let row = 0; row < y; row++) {\n      matrix.push([]);\n      for (let col = 0; col < x; col++) {\n        matrix[row].push(source[index]);\n        index++;\n      }\n    }\n    return matrix;\n  };\n\n\n\n\n  // const payload = (data) => {\n    // return <SelectCell style={cellStyle} content={col} selectedColor={colorMap[col]} audio={audio}/>\n  // };\n\n  // return (\n  //   <div>{JSON.stringify(makeMatrix(3,3,shuffledColors))}</div>\n  // );\n\n  const rowHeight = (window.innerHeight - 30) / rows;\n  const colWidth = (window.innerWidth * .8) / columns;\n\n  const cellStyle = {\n    display: \"inline-block\",\n    width: colWidth,\n    height: rowHeight,\n    verticalAlign: \"middle\",\n    textAlign: \"center\",\n    fontSize: 32\n  };\n\n  const matrix = makeMatrix(rows, columns, shuffleArray(colorList));\n  return (\n    <Table className=\"ColorMatch\" onClick={(e) => {e.preventDefault()}}>\n      <tbody onClick={(e) => {e.preventDefault()}}>\n      {\n        matrix.map(row => {\n          return <tr onClick={(e) => {e.preventDefault()}}>\n            {\n              row.map(col => {\n                const style = Object.assign({}, cellStyle, {background: col});\n                style.color = lightOrDark(col) === \"light\" || col === \"black\" ? \"white\" : \"black\";\n                return <td onClick={() => speechSynth(col, 'en-US')} style={style}>{col[0].toUpperCase()}</td>\n              })\n            }\n          </tr>\n        })\n\n      }\n      </tbody>\n    </Table>\n  )\n\n};","import React, {useState} from 'react';\nimport { Form } from 'react-bootstrap';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport { KeyResponse } from './components/KeyResponse';\nimport { GameBoard as LetterSearch } from \"./components/Game/LetterSearch\";\nimport { GameBoard as ColorMatchGame } from \"./components/Game/ColorMatch/gameboard\"\n\nconst Modes = {\n  \"Keyboard\": \"Keyboard\",\n  \"LetterSearch\": \"LetterSearch\",\n  \"ColorMatch\": \"ColorMatch\"\n};\n\n\nfunction App() {\n  const [mode, setMode] = useState(Modes.LetterSearch);\n\n  const getContent = (mode) => {\n    switch (mode) {\n      case Modes.ColorMatch:\n        return <ColorMatchGame columns={3} rows={3}/>;\n\n      case Modes.LetterSearch:\n        return <LetterSearch/>;\n\n      case Modes.Keyboard:\n        return <KeyResponse audioPath=\"set1/\" />;\n\n      default:\n        return <div>unknown</div>\n    }\n  };\n\n\n  return (\n    <div className=\"App\">\n\n      { getContent(mode) }\n\n      <div className=\"ModeSelect\">\n        <Form.Control as=\"select\" onChange={(e) => setMode(e.target.value)}>\n          <option value={Modes.Keyboard}>Keyboard</option>\n          <option value={Modes.LetterSearch}>Letter Search</option>\n          <option value={Modes.ColorMatch}>Color Match</option>\n        </Form.Control>\n      </div>\n      {/*<Prompt setGoal={setGoal}/>*/}\n      {/*{ isBeta*/}\n      {/*  ? <GameBoard columns={3} rows={3}/>*/}\n      {/*  : <KeyResponse audioPath=\"set1/\" setGuess={setGuess} />*/}\n      {/*}*/}\n      {/*{*/}\n      {/*  goal !== null && goal === guess*/}\n      {/*  ? <div>YOU WIN</div>*/}\n      {/*  : <div />*/}\n      {/*}*/}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}